{
  "version": 3,
  "sources": ["../clsx/dist/clsx.m.js", "../react-toastify/src/utils/propValidator.ts", "../react-toastify/src/utils/constant.ts", "../react-toastify/src/utils/collapseToast.ts", "../react-toastify/src/utils/cssTransition.tsx", "../react-toastify/src/core/eventManager.ts", "../react-toastify/src/hooks/useToastContainer.ts", "../react-toastify/src/hooks/useToast.ts", "../react-toastify/src/components/CloseButton.tsx", "../react-toastify/src/components/ProgressBar.tsx", "../react-toastify/src/components/Icons.tsx", "../react-toastify/src/components/Toast.tsx", "../react-toastify/src/components/Transitions.tsx", "../react-toastify/src/components/ToastContainer.tsx", "../react-toastify/src/core/toast.tsx"],
  "sourcesContent": ["function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n", "import { isValidElement } from 'react';\n\nimport { Id } from '../types';\n\nexport function isNum(v: any): v is Number {\n  return typeof v === 'number' && !isNaN(v);\n}\n\nexport function isBool(v: any): v is Boolean {\n  return typeof v === 'boolean';\n}\n\nexport function isStr(v: any): v is String {\n  return typeof v === 'string';\n}\n\nexport function isFn(v: any): v is Function {\n  return typeof v === 'function';\n}\n\nexport function parseClassName(v: any) {\n  return isStr(v) || isFn(v) ? v : null;\n}\n\nexport function isToastIdValid(toastId?: Id) {\n  return toastId === 0 || toastId;\n}\n\nexport function getAutoCloseDelay(\n  toastAutoClose?: false | number,\n  containerAutoClose?: false | number\n) {\n  return toastAutoClose === false ||\n    (isNum(toastAutoClose) && toastAutoClose > 0)\n    ? toastAutoClose\n    : containerAutoClose;\n}\n\nexport const canUseDom = !!(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nexport function canBeRendered<T>(content: T): boolean {\n  return (\n    isValidElement(content) || isStr(content) || isFn(content) || isNum(content)\n  );\n}\n", "import { ToastPosition, TypeOptions } from '../types';\n\ntype KeyOfPosition =\n  | 'TOP_LEFT'\n  | 'TOP_RIGHT'\n  | 'TOP_CENTER'\n  | 'BOTTOM_LEFT'\n  | 'BOTTOM_RIGHT'\n  | 'BOTTOM_CENTER';\n\ntype KeyOfType = 'INFO' | 'SUCCESS' | 'WARNING' | 'ERROR' | 'DEFAULT';\n\nexport const POSITION: { [key in KeyOfPosition]: ToastPosition } = {\n  TOP_LEFT: 'top-left',\n  TOP_RIGHT: 'top-right',\n  TOP_CENTER: 'top-center',\n  BOTTOM_LEFT: 'bottom-left',\n  BOTTOM_RIGHT: 'bottom-right',\n  BOTTOM_CENTER: 'bottom-center'\n};\n\nexport const TYPE: { [key in KeyOfType]: TypeOptions } = {\n  INFO: 'info',\n  SUCCESS: 'success',\n  WARNING: 'warning',\n  ERROR: 'error',\n  DEFAULT: 'default'\n};\n\nexport const enum Default {\n  COLLAPSE_DURATION = 300,\n  DEBOUNCE_DURATION = 50,\n  CSS_NAMESPACE = 'Toastify',\n  DRAGGABLE_PERCENT = 80\n}\n\nexport const enum Direction {\n  X = 'x',\n  Y = 'y'\n}\n\nexport const enum SyntheticEvent {\n  ENTRANCE_ANIMATION_END = 'd'\n}\n", "import { Default } from './constant';\n\n/**\n * Used to collapse toast after exit animation\n */\nexport function collapseToast(\n  node: HTMLElement,\n  done: () => void,\n  duration = Default.COLLAPSE_DURATION\n) {\n  const { scrollHeight, style } = node;\n\n  requestAnimationFrame(() => {\n    style.minHeight = 'initial';\n    style.height = scrollHeight + 'px';\n    style.transition = `all ${duration}ms`;\n\n    requestAnimationFrame(() => {\n      style.height = '0';\n      style.padding = '0';\n      style.margin = '0';\n      setTimeout(done, duration as number);\n    });\n  });\n}\n", "import React, { useEffect, useLayoutEffect, useRef } from 'react';\n\nimport { collapseToast } from './collapseToast';\nimport { Default, SyntheticEvent } from './constant';\n\nimport { ToastTransitionProps } from '../types';\n\nexport interface CSSTransitionProps {\n  /**\n   * Css class to apply when toast enter\n   */\n  enter: string;\n\n  /**\n   * Css class to apply when toast leave\n   */\n  exit: string;\n\n  /**\n   * Append current toast position to the classname.\n   * If multiple classes are provided, only the last one will get the position\n   * For instance `myclass--top-center`...\n   * `Default: false`\n   */\n  appendPosition?: boolean;\n\n  /**\n   * Collapse toast smoothly when exit animation end\n   * `Default: true`\n   */\n  collapse?: boolean;\n\n  /**\n   * Collapse transition duration\n   * `Default: 300`\n   */\n  collapseDuration?: number;\n}\n\nconst enum AnimationStep {\n  Enter,\n  Exit\n}\n\n/**\n * Css animation that just work.\n * You could use animate.css for instance\n *\n *\n * ```\n * cssTransition({\n *   enter: \"animate__animated animate__bounceIn\",\n *   exit: \"animate__animated animate__bounceOut\"\n * })\n * ```\n *\n */\nexport function cssTransition({\n  enter,\n  exit,\n  appendPosition = false,\n  collapse = true,\n  collapseDuration = Default.COLLAPSE_DURATION\n}: CSSTransitionProps) {\n  return function ToastTransition({\n    children,\n    position,\n    preventExitTransition,\n    done,\n    nodeRef,\n    isIn\n  }: ToastTransitionProps) {\n    const enterClassName = appendPosition ? `${enter}--${position}` : enter;\n    const exitClassName = appendPosition ? `${exit}--${position}` : exit;\n    const baseClassName = useRef<string>();\n    const animationStep = useRef(AnimationStep.Enter);\n\n    useLayoutEffect(() => {\n      onEnter();\n    }, []);\n\n    useEffect(() => {\n      if (!isIn) preventExitTransition ? onExited() : onExit();\n    }, [isIn]);\n\n    function onEnter() {\n      const node = nodeRef.current!;\n      baseClassName.current = node.className;\n      node.className += ` ${enterClassName}`;\n      node.addEventListener('animationend', onEntered);\n    }\n\n    function onEntered(e: AnimationEvent) {\n      if (e.target !== nodeRef.current) return;\n\n      const node = nodeRef.current!;\n      node.dispatchEvent(new Event(SyntheticEvent.ENTRANCE_ANIMATION_END));\n      node.removeEventListener('animationend', onEntered);\n      if (animationStep.current === AnimationStep.Enter) {\n        node.className = baseClassName.current!;\n      }\n    }\n\n    function onExit() {\n      animationStep.current = AnimationStep.Exit;\n      const node = nodeRef.current!;\n\n      node.className += ` ${exitClassName}`;\n      node.addEventListener('animationend', onExited);\n    }\n\n    function onExited() {\n      const node = nodeRef.current!;\n\n      node.removeEventListener('animationend', onExited);\n      collapse ? collapseToast(node, done, collapseDuration) : done();\n    }\n\n    return <>{children}</>;\n  };\n}\n", "import {\n  Id,\n  ToastContent,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps\n} from '../types';\nimport { ContainerInstance } from '../hooks';\n\nexport const enum Event {\n  Show,\n  Clear,\n  DidMount,\n  WillUnmount,\n  Change,\n  ClearWaitingQueue\n}\n\ntype OnShowCallback = (\n  content: ToastContent,\n  options: NotValidatedToastProps\n) => void;\ntype OnClearCallback = (id?: Id) => void;\ntype OnClearWaitingQueue = (params: ClearWaitingQueueParams) => void;\ntype OnDidMountCallback = (containerInstance: ContainerInstance) => void;\ntype OnWillUnmountCallback = OnDidMountCallback;\nexport type OnChangeCallback = (\n  toast: number,\n  containerId?: number | string\n) => void;\ntype Callback =\n  | OnShowCallback\n  | OnClearCallback\n  | OnClearWaitingQueue\n  | OnDidMountCallback\n  | OnWillUnmountCallback\n  | OnChangeCallback;\ntype TimeoutId = ReturnType<typeof setTimeout>;\n\nexport interface EventManager {\n  list: Map<Event, Callback[]>;\n  emitQueue: Map<Event, TimeoutId[]>;\n  on(event: Event.Show, callback: OnShowCallback): EventManager;\n  on(event: Event.Clear, callback: OnClearCallback): EventManager;\n  on(\n    event: Event.ClearWaitingQueue,\n    callback: OnClearWaitingQueue\n  ): EventManager;\n  on(event: Event.DidMount, callback: OnDidMountCallback): EventManager;\n  on(event: Event.WillUnmount, callback: OnWillUnmountCallback): EventManager;\n  on(event: Event.Change, callback: OnChangeCallback): EventManager;\n  off(event: Event, callback?: Callback): EventManager;\n  cancelEmit(event: Event): EventManager;\n  emit(\n    event: Event.Show,\n    content: React.ReactNode,\n    options: NotValidatedToastProps\n  ): void;\n  emit(event: Event.Clear, id?: string | number): void;\n  emit(event: Event.ClearWaitingQueue, params: ClearWaitingQueueParams): void;\n  emit(event: Event.DidMount, containerInstance: ContainerInstance): void;\n  emit(event: Event.WillUnmount, containerInstance: ContainerInstance): void;\n  emit(event: Event.Change, toast: number, containerId?: number | string): void;\n}\n\nexport const eventManager: EventManager = {\n  list: new Map(),\n  emitQueue: new Map(),\n\n  on(event: Event, callback: Callback) {\n    this.list.has(event) || this.list.set(event, []);\n    this.list.get(event)!.push(callback);\n    return this;\n  },\n\n  off(event, callback) {\n    if (callback) {\n      const cb = this.list.get(event)!.filter(cb => cb !== callback);\n      this.list.set(event, cb);\n      return this;\n    }\n    this.list.delete(event);\n    return this;\n  },\n\n  cancelEmit(event) {\n    const timers = this.emitQueue.get(event);\n    if (timers) {\n      timers.forEach(clearTimeout);\n      this.emitQueue.delete(event);\n    }\n\n    return this;\n  },\n\n  /**\n   * Enqueue the event at the end of the call stack\n   * Doing so let the user call toast as follow:\n   * toast('1')\n   * toast('2')\n   * toast('3')\n   * Without setTimemout the code above will not work\n   */\n  emit(event: Event, ...args: any[]) {\n    this.list.has(event) &&\n      this.list.get(event)!.forEach((callback: Callback) => {\n        const timer: TimeoutId = setTimeout(() => {\n          // @ts-ignore\n          callback(...args);\n        }, 0);\n\n        this.emitQueue.has(event) || this.emitQueue.set(event, []);\n        this.emitQueue.get(event)!.push(timer);\n      });\n  }\n};\n", "import {\n  useEffect,\n  useRef,\n  useReducer,\n  cloneElement,\n  isValidElement,\n  useState\n} from 'react';\nimport {\n  parseClassName,\n  canBeRendered,\n  isBool,\n  isFn,\n  isNum,\n  isStr,\n  isToastIdValid,\n  getAutoCloseDelay\n} from '../utils';\nimport { eventManager, Event } from '../core/eventManager';\n\nimport {\n  Id,\n  ToastContainerProps,\n  ToastProps,\n  ToastContent,\n  Toast,\n  ToastPosition,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps,\n  ToastTransition\n} from '../types';\n\ninterface QueuedToast {\n  toastContent: ToastContent;\n  toastProps: ToastProps;\n  staleId?: Id;\n}\n\nexport interface ContainerInstance {\n  toastKey: number;\n  displayedToast: number;\n  props: ToastContainerProps;\n  containerId?: Id | null;\n  isToastActive: (toastId: Id) => boolean;\n  getToast: (id: Id) => Toast | null | undefined;\n  queue: QueuedToast[];\n  count: number;\n}\n\nexport function useToastContainer(props: ToastContainerProps) {\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n  const [toastIds, setToastIds] = useState<Id[]>([]);\n  const containerRef = useRef(null);\n  const toastToRender = useRef(new Map<Id, Toast>()).current;\n  const isToastActive = (id: Id) => toastIds.indexOf(id) !== -1;\n  const instance = useRef<ContainerInstance>({\n    toastKey: 1,\n    displayedToast: 0,\n    count: 0,\n    queue: [],\n    props,\n    containerId: null,\n    isToastActive,\n    getToast: id => toastToRender.get(id)\n  }).current;\n\n  useEffect(() => {\n    instance.containerId = props.containerId;\n    eventManager\n      .cancelEmit(Event.WillUnmount)\n      .on(Event.Show, buildToast)\n      .on(Event.Clear, toastId => containerRef.current && removeToast(toastId))\n      .on(Event.ClearWaitingQueue, clearWaitingQueue)\n      .emit(Event.DidMount, instance);\n\n    return () => eventManager.emit(Event.WillUnmount, instance);\n  }, []);\n\n  useEffect(() => {\n    instance.isToastActive = isToastActive;\n    instance.displayedToast = toastIds.length;\n    eventManager.emit(Event.Change, toastIds.length, props.containerId);\n  }, [toastIds]);\n\n  useEffect(() => {\n    instance.props = props;\n  });\n\n  function clearWaitingQueue({ containerId }: ClearWaitingQueueParams) {\n    const { limit } = instance.props;\n    if (limit && (!containerId || instance.containerId === containerId)) {\n      instance.count -= instance.queue.length;\n      instance.queue = [];\n    }\n  }\n\n  function removeToast(toastId?: Id) {\n    setToastIds(state =>\n      isToastIdValid(toastId) ? state.filter(id => id !== toastId) : []\n    );\n  }\n\n  function dequeueToast() {\n    const {\n      toastContent,\n      toastProps,\n      staleId\n    } = instance.queue.shift() as QueuedToast;\n    appendToast(toastContent, toastProps, staleId);\n  }\n\n  /**\n   * check if a container is attached to the dom\n   * check for multi-container, build only if associated\n   * check for duplicate toastId if no update\n   */\n  function isNotValid(options: NotValidatedToastProps) {\n    return (\n      !containerRef.current ||\n      (instance.props.enableMultiContainer &&\n        options.containerId !== instance.props.containerId) ||\n      (toastToRender.has(options.toastId) && options.updateId == null)\n    );\n  }\n\n  // this function and all the function called inside needs to rely on refs\n  function buildToast(\n    content: ToastContent,\n    { delay, staleId, ...options }: NotValidatedToastProps\n  ) {\n    if (!canBeRendered(content) || isNotValid(options)) return;\n\n    const { toastId, updateId, data } = options;\n    const { props } = instance;\n    const closeToast = () => removeToast(toastId);\n    const isNotAnUpdate = updateId == null;\n\n    if (isNotAnUpdate) instance.count++;\n\n    const toastProps: ToastProps = {\n      toastId,\n      updateId,\n      isLoading: options.isLoading,\n      theme: options.theme || props.theme!,\n      icon: options.icon != null ? options.icon : props.icon,\n      isIn: false,\n      key: options.key || instance.toastKey++,\n      type: options.type!,\n      closeToast: closeToast,\n      closeButton: options.closeButton,\n      rtl: props.rtl,\n      position: options.position || (props.position as ToastPosition),\n      transition: options.transition || (props.transition as ToastTransition),\n      className: parseClassName(options.className || props.toastClassName),\n      bodyClassName: parseClassName(\n        options.bodyClassName || props.bodyClassName\n      ),\n      style: options.style || props.toastStyle,\n      bodyStyle: options.bodyStyle || props.bodyStyle,\n      onClick: options.onClick || props.onClick,\n      pauseOnHover: isBool(options.pauseOnHover)\n        ? options.pauseOnHover\n        : props.pauseOnHover,\n      pauseOnFocusLoss: isBool(options.pauseOnFocusLoss)\n        ? options.pauseOnFocusLoss\n        : props.pauseOnFocusLoss,\n      draggable: isBool(options.draggable)\n        ? options.draggable\n        : props.draggable,\n      draggablePercent:\n        options.draggablePercent || (props.draggablePercent as number),\n      draggableDirection:\n        options.draggableDirection || props.draggableDirection,\n      closeOnClick: isBool(options.closeOnClick)\n        ? options.closeOnClick\n        : props.closeOnClick,\n      progressClassName: parseClassName(\n        options.progressClassName || props.progressClassName\n      ),\n      progressStyle: options.progressStyle || props.progressStyle,\n      autoClose: options.isLoading\n        ? false\n        : getAutoCloseDelay(options.autoClose, props.autoClose),\n      hideProgressBar: isBool(options.hideProgressBar)\n        ? options.hideProgressBar\n        : props.hideProgressBar,\n      progress: options.progress,\n      role: options.role || props.role,\n      deleteToast() {\n        toastToRender.delete(toastId);\n        const queueLen = instance.queue.length;\n        instance.count = isToastIdValid(toastId)\n          ? instance.count - 1\n          : instance.count - instance.displayedToast;\n\n        if (instance.count < 0) instance.count = 0;\n\n        if (queueLen > 0) {\n          const freeSlot = isToastIdValid(toastId) ? 1 : instance.props.limit!;\n\n          if (queueLen === 1 || freeSlot === 1) {\n            instance.displayedToast++;\n            dequeueToast();\n          } else {\n            const toDequeue = freeSlot > queueLen ? queueLen : freeSlot;\n            instance.displayedToast = toDequeue;\n\n            for (let i = 0; i < toDequeue; i++) dequeueToast();\n          }\n        } else {\n          forceUpdate();\n        }\n      }\n    };\n\n    if (isFn(options.onOpen)) toastProps.onOpen = options.onOpen;\n    if (isFn(options.onClose)) toastProps.onClose = options.onClose;\n\n    toastProps.closeButton = props.closeButton;\n\n    if (options.closeButton === false || canBeRendered(options.closeButton)) {\n      toastProps.closeButton = options.closeButton;\n    } else if (options.closeButton === true) {\n      toastProps.closeButton = canBeRendered(props.closeButton)\n        ? props.closeButton\n        : true;\n    }\n\n    let toastContent = content;\n\n    if (isValidElement(content) && !isStr(content.type)) {\n      toastContent = cloneElement(content, {\n        closeToast,\n        toastProps,\n        data\n      });\n    } else if (isFn(content)) {\n      toastContent = content({ closeToast, toastProps, data });\n    }\n\n    // not handling limit + delay by design. Waiting for user feedback first\n    if (\n      props.limit &&\n      props.limit > 0 &&\n      instance.count > props.limit &&\n      isNotAnUpdate\n    ) {\n      instance.queue.push({ toastContent, toastProps, staleId });\n    } else if (isNum(delay) && (delay as number) > 0) {\n      setTimeout(() => {\n        appendToast(toastContent, toastProps, staleId);\n      }, delay);\n    } else {\n      appendToast(toastContent, toastProps, staleId);\n    }\n  }\n\n  function appendToast(\n    content: ToastContent,\n    toastProps: ToastProps,\n    staleId?: Id\n  ) {\n    const { toastId } = toastProps;\n\n    if (staleId) toastToRender.delete(staleId);\n\n    toastToRender.set(toastId, {\n      content,\n      props: toastProps\n    });\n    setToastIds(state => [...state, toastId].filter(id => id !== staleId));\n  }\n\n  function getToastToRender<T>(\n    cb: (position: ToastPosition, toastList: Toast[]) => T\n  ) {\n    const toRender = new Map<ToastPosition, Toast[]>();\n    const collection = Array.from(toastToRender.values());\n\n    if (props.newestOnTop) collection.reverse();\n\n    collection.forEach(toast => {\n      const { position } = toast.props;\n      toRender.has(position) || toRender.set(position, []);\n      toRender.get(position)!.push(toast);\n    });\n\n    return Array.from(toRender, p => cb(p[0], p[1]));\n  }\n\n  return {\n    getToastToRender,\n    containerRef,\n    isToastActive\n  };\n}\n", "import {\n  useState,\n  useRef,\n  useEffect,\n  isValidElement,\n  DOMAttributes\n} from 'react';\n\nimport { isFn, Default, Direction, SyntheticEvent } from '../utils';\nimport { ToastProps } from '../types';\n\ninterface Draggable {\n  start: number;\n  x: number;\n  y: number;\n  delta: number;\n  removalDistance: number;\n  canCloseOnClick: boolean;\n  canDrag: boolean;\n  boundingRect: DOMRect | null;\n  didMove: boolean;\n}\n\ntype DragEvent = MouseEvent & TouchEvent;\n\nfunction getX(e: DragEvent) {\n  return e.targetTouches && e.targetTouches.length >= 1\n    ? e.targetTouches[0].clientX\n    : e.clientX;\n}\n\nfunction getY(e: DragEvent) {\n  return e.targetTouches && e.targetTouches.length >= 1\n    ? e.targetTouches[0].clientY\n    : e.clientY;\n}\n\nexport function useToast(props: ToastProps) {\n  const [isRunning, setIsRunning] = useState(false);\n  const [preventExitTransition, setPreventExitTransition] = useState(false);\n  const toastRef = useRef<HTMLDivElement>(null);\n  const drag = useRef<Draggable>({\n    start: 0,\n    x: 0,\n    y: 0,\n    delta: 0,\n    removalDistance: 0,\n    canCloseOnClick: true,\n    canDrag: false,\n    boundingRect: null,\n    didMove: false\n  }).current;\n  const syncProps = useRef(props);\n  const { autoClose, pauseOnHover, closeToast, onClick, closeOnClick } = props;\n\n  useEffect(() => {\n    syncProps.current = props;\n  });\n\n  useEffect(() => {\n    if (toastRef.current)\n      toastRef.current.addEventListener(\n        SyntheticEvent.ENTRANCE_ANIMATION_END,\n        playToast,\n        { once: true }\n      );\n\n    if (isFn(props.onOpen))\n      props.onOpen(isValidElement(props.children) && props.children.props);\n\n    return () => {\n      const props = syncProps.current;\n      if (isFn(props.onClose))\n        props.onClose(isValidElement(props.children) && props.children.props);\n    };\n  }, []);\n\n  useEffect(() => {\n    props.pauseOnFocusLoss && bindFocusEvents();\n    return () => {\n      props.pauseOnFocusLoss && unbindFocusEvents();\n    };\n  }, [props.pauseOnFocusLoss]);\n\n  function onDragStart(\n    e: React.MouseEvent<HTMLElement, MouseEvent> | React.TouchEvent<HTMLElement>\n  ) {\n    if (props.draggable) {\n      bindDragEvents();\n      const toast = toastRef.current!;\n      drag.canCloseOnClick = true;\n      drag.canDrag = true;\n      drag.boundingRect = toast.getBoundingClientRect();\n      toast.style.transition = '';\n      drag.x = getX(e.nativeEvent as DragEvent);\n      drag.y = getY(e.nativeEvent as DragEvent);\n\n      if (props.draggableDirection === Direction.X) {\n        drag.start = drag.x;\n        drag.removalDistance =\n          toast.offsetWidth * (props.draggablePercent / 100);\n      } else {\n        drag.start = drag.y;\n        drag.removalDistance =\n          toast.offsetHeight *\n          (props.draggablePercent === Default.DRAGGABLE_PERCENT\n            ? props.draggablePercent * 1.5\n            : props.draggablePercent / 100);\n      }\n    }\n  }\n\n  function onDragTransitionEnd() {\n    if (drag.boundingRect) {\n      const { top, bottom, left, right } = drag.boundingRect;\n\n      if (\n        props.pauseOnHover &&\n        drag.x >= left &&\n        drag.x <= right &&\n        drag.y >= top &&\n        drag.y <= bottom\n      ) {\n        pauseToast();\n      } else {\n        playToast();\n      }\n    }\n  }\n\n  function playToast() {\n    setIsRunning(true);\n  }\n\n  function pauseToast() {\n    setIsRunning(false);\n  }\n\n  function bindFocusEvents() {\n    if (!document.hasFocus()) pauseToast();\n\n    window.addEventListener('focus', playToast);\n    window.addEventListener('blur', pauseToast);\n  }\n\n  function unbindFocusEvents() {\n    window.removeEventListener('focus', playToast);\n    window.removeEventListener('blur', pauseToast);\n  }\n\n  function bindDragEvents() {\n    drag.didMove = false;\n    document.addEventListener('mousemove', onDragMove);\n    document.addEventListener('mouseup', onDragEnd);\n\n    document.addEventListener('touchmove', onDragMove);\n    document.addEventListener('touchend', onDragEnd);\n  }\n\n  function unbindDragEvents() {\n    document.removeEventListener('mousemove', onDragMove);\n    document.removeEventListener('mouseup', onDragEnd);\n\n    document.removeEventListener('touchmove', onDragMove);\n    document.removeEventListener('touchend', onDragEnd);\n  }\n\n  function onDragMove(e: MouseEvent | TouchEvent) {\n    const toast = toastRef.current!;\n    if (drag.canDrag && toast) {\n      drag.didMove = true;\n      if (isRunning) pauseToast();\n      drag.x = getX(e as DragEvent);\n      drag.y = getY(e as DragEvent);\n      if (props.draggableDirection === Direction.X) {\n        drag.delta = drag.x - drag.start;\n      } else {\n        drag.delta = drag.y - drag.start;\n      }\n\n      // prevent false positif during a toast click\n      if (drag.start !== drag.x) drag.canCloseOnClick = false;\n      toast.style.transform = `translate${props.draggableDirection}(${drag.delta}px)`;\n      toast.style.opacity = `${1 -\n        Math.abs(drag.delta / drag.removalDistance)}`;\n    }\n  }\n\n  function onDragEnd() {\n    unbindDragEvents();\n    const toast = toastRef.current!;\n    if (drag.canDrag && drag.didMove && toast) {\n      drag.canDrag = false;\n      if (Math.abs(drag.delta) > drag.removalDistance) {\n        setPreventExitTransition(true);\n        props.closeToast();\n        return;\n      }\n      toast.style.transition = 'transform 0.2s, opacity 0.2s';\n      toast.style.transform = `translate${props.draggableDirection}(0)`;\n      toast.style.opacity = '1';\n    }\n  }\n\n  const eventHandlers: DOMAttributes<HTMLElement> = {\n    onMouseDown: onDragStart,\n    onTouchStart: onDragStart,\n    onMouseUp: onDragTransitionEnd,\n    onTouchEnd: onDragTransitionEnd\n  };\n\n  if (autoClose && pauseOnHover) {\n    eventHandlers.onMouseEnter = pauseToast;\n    eventHandlers.onMouseLeave = playToast;\n  }\n\n  // prevent toast from closing when user drags the toast\n  if (closeOnClick) {\n    eventHandlers.onClick = (e: React.MouseEvent) => {\n      onClick && onClick(e);\n      drag.canCloseOnClick && closeToast();\n    };\n  }\n\n  return {\n    playToast,\n    pauseToast,\n    isRunning,\n    preventExitTransition,\n    toastRef,\n    eventHandlers\n  };\n}\n", "import * as React from 'react';\nimport { Default } from '../utils';\nimport { Theme, TypeOptions } from '../types';\n\nexport interface CloseButtonProps {\n  closeToast: (e: React.MouseEvent<HTMLElement>) => void;\n  type: TypeOptions;\n  ariaLabel?: string;\n  theme: Theme;\n}\n\nexport function CloseButton({\n  closeToast,\n  theme,\n  ariaLabel = 'close'\n}: CloseButtonProps) {\n  return (\n    <button\n      className={`${Default.CSS_NAMESPACE}__close-button ${Default.CSS_NAMESPACE}__close-button--${theme}`}\n      type=\"button\"\n      onClick={e => {\n        e.stopPropagation();\n        closeToast(e);\n      }}\n      aria-label={ariaLabel}\n    >\n      <svg aria-hidden=\"true\" viewBox=\"0 0 14 16\">\n        <path\n          fillRule=\"evenodd\"\n          d=\"M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z\"\n        />\n      </svg>\n    </button>\n  );\n}\n", "import * as React from 'react';\nimport cx from 'clsx';\n\nimport { TYPE, Default, isFn } from './../utils';\nimport { TypeOptions, ToastClassName, Theme } from '../types';\n\nexport interface ProgressBarProps {\n  /**\n   * The animation delay which determine when to close the toast\n   */\n  delay: number;\n\n  /**\n   * Whether or not the animation is running or paused\n   */\n  isRunning: boolean;\n\n  /**\n   * Func to close the current toast\n   */\n  closeToast: () => void;\n\n  /**\n   * Optional type : info, success ...\n   */\n  type: TypeOptions;\n\n  /**\n   * The theme that is currently used\n   */\n  theme: Theme;\n\n  /**\n   * Hide or not the progress bar\n   */\n  hide?: boolean;\n\n  /**\n   * Optionnal className\n   */\n  className?: ToastClassName;\n\n  /**\n   * Optionnal inline style\n   */\n  style?: React.CSSProperties;\n\n  /**\n   * Tell wether or not controlled progress bar is used\n   */\n  controlledProgress?: boolean;\n\n  /**\n   * Controlled progress value\n   */\n  progress?: number | string;\n\n  /**\n   * Support rtl content\n   */\n  rtl?: boolean;\n\n  /**\n   * Tell if the component is visible on screen or not\n   */\n  isIn?: boolean;\n}\n\nexport function ProgressBar({\n  delay,\n  isRunning,\n  closeToast,\n  type,\n  hide,\n  className,\n  style: userStyle,\n  controlledProgress,\n  progress,\n  rtl,\n  isIn,\n  theme\n}: ProgressBarProps) {\n  const style: React.CSSProperties = {\n    ...userStyle,\n    animationDuration: `${delay}ms`,\n    animationPlayState: isRunning ? 'running' : 'paused',\n    opacity: hide ? 0 : 1\n  };\n\n  if (controlledProgress) style.transform = `scaleX(${progress})`;\n  const defaultClassName = cx(\n    `${Default.CSS_NAMESPACE}__progress-bar`,\n    controlledProgress\n      ? `${Default.CSS_NAMESPACE}__progress-bar--controlled`\n      : `${Default.CSS_NAMESPACE}__progress-bar--animated`,\n    `${Default.CSS_NAMESPACE}__progress-bar-theme--${theme}`,\n    `${Default.CSS_NAMESPACE}__progress-bar--${type}`,\n    {\n      [`${Default.CSS_NAMESPACE}__progress-bar--rtl`]: rtl\n    }\n  );\n  const classNames = isFn(className)\n    ? className({\n        rtl,\n        type,\n        defaultClassName\n      })\n    : cx(defaultClassName, className);\n\n  // \uD83E\uDDD0 controlledProgress is derived from progress\n  // so if controlledProgress is set\n  // it means that this is also the case for progress\n  const animationEvent = {\n    [controlledProgress && progress! >= 1\n      ? 'onTransitionEnd'\n      : 'onAnimationEnd']:\n      controlledProgress && progress! < 1\n        ? null\n        : () => {\n            isIn && closeToast();\n          }\n  };\n\n  // TODO: add aria-valuenow, aria-valuemax, aria-valuemin\n\n  return (\n    <div\n      role=\"progressbar\"\n      aria-hidden={hide ? 'true' : 'false'}\n      aria-label=\"notification timer\"\n      className={classNames}\n      style={style}\n      {...animationEvent}\n    />\n  );\n}\n\nProgressBar.defaultProps = {\n  type: TYPE.DEFAULT,\n  hide: false\n};\n", "import * as React from 'react';\n\nimport { Theme, TypeOptions } from '../types';\nimport { Default } from '../utils';\n\n/**\n * Used when providing custom icon\n */\nexport interface IconProps {\n  theme: Theme;\n  type: TypeOptions;\n}\n\nexport type BuiltInIconProps = React.SVGProps<SVGSVGElement> & IconProps;\n\nconst Svg: React.FC<BuiltInIconProps> = ({ theme, type, ...rest }) => (\n  <svg\n    viewBox=\"0 0 24 24\"\n    width=\"100%\"\n    height=\"100%\"\n    fill={\n      theme === 'colored'\n        ? 'currentColor'\n        : `var(--toastify-icon-color-${type})`\n    }\n    {...rest}\n  />\n);\n\nfunction Warning(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M23.32 17.191L15.438 2.184C14.728.833 13.416 0 11.996 0c-1.42 0-2.733.833-3.443 2.184L.533 17.448a4.744 4.744 0 000 4.368C1.243 23.167 2.555 24 3.975 24h16.05C22.22 24 24 22.044 24 19.632c0-.904-.251-1.746-.68-2.44zm-9.622 1.46c0 1.033-.724 1.823-1.698 1.823s-1.698-.79-1.698-1.822v-.043c0-1.028.724-1.822 1.698-1.822s1.698.79 1.698 1.822v.043zm.039-12.285l-.84 8.06c-.057.581-.408.943-.897.943-.49 0-.84-.367-.896-.942l-.84-8.065c-.057-.624.25-1.095.779-1.095h1.91c.528.005.84.476.784 1.1z\" />\n    </Svg>\n  );\n}\n\nfunction Info(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M12 0a12 12 0 1012 12A12.013 12.013 0 0012 0zm.25 5a1.5 1.5 0 11-1.5 1.5 1.5 1.5 0 011.5-1.5zm2.25 13.5h-4a1 1 0 010-2h.75a.25.25 0 00.25-.25v-4.5a.25.25 0 00-.25-.25h-.75a1 1 0 010-2h1a2 2 0 012 2v4.75a.25.25 0 00.25.25h.75a1 1 0 110 2z\" />\n    </Svg>\n  );\n}\n\nfunction Success(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M12 0a12 12 0 1012 12A12.014 12.014 0 0012 0zm6.927 8.2l-6.845 9.289a1.011 1.011 0 01-1.43.188l-4.888-3.908a1 1 0 111.25-1.562l4.076 3.261 6.227-8.451a1 1 0 111.61 1.183z\" />\n    </Svg>\n  );\n}\n\nfunction Error(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M11.983 0a12.206 12.206 0 00-8.51 3.653A11.8 11.8 0 000 12.207 11.779 11.779 0 0011.8 24h.214A12.111 12.111 0 0024 11.791 11.766 11.766 0 0011.983 0zM10.5 16.542a1.476 1.476 0 011.449-1.53h.027a1.527 1.527 0 011.523 1.47 1.475 1.475 0 01-1.449 1.53h-.027a1.529 1.529 0 01-1.523-1.47zM11 12.5v-6a1 1 0 012 0v6a1 1 0 11-2 0z\" />\n    </Svg>\n  );\n}\n\nfunction Spinner() {\n  return <div className={`${Default.CSS_NAMESPACE}__spinner`} />;\n}\n\nexport const Icons = {\n  info: Info,\n  warning: Warning,\n  success: Success,\n  error: Error,\n  spinner: Spinner\n};\n", "import * as React from 'react';\nimport cx from 'clsx';\n\nimport { ProgressBar } from './ProgressBar';\nimport { Icons } from './Icons';\nimport { ToastProps } from '../types';\nimport { Default, isFn, isStr } from '../utils';\nimport { useToast } from '../hooks';\n\nexport const Toast: React.FC<ToastProps> = props => {\n  const {\n    isRunning,\n    preventExitTransition,\n    toastRef,\n    eventHandlers\n  } = useToast(props);\n  const {\n    closeButton,\n    children,\n    autoClose,\n    onClick,\n    type,\n    hideProgressBar,\n    closeToast,\n    transition: Transition,\n    position,\n    className,\n    style,\n    bodyClassName,\n    bodyStyle,\n    progressClassName,\n    progressStyle,\n    updateId,\n    role,\n    progress,\n    rtl,\n    toastId,\n    deleteToast,\n    isIn,\n    isLoading,\n    icon,\n    theme\n  } = props;\n  const defaultClassName = cx(\n    `${Default.CSS_NAMESPACE}__toast`,\n    `${Default.CSS_NAMESPACE}__toast-theme--${theme}`,\n    `${Default.CSS_NAMESPACE}__toast--${type}`,\n    {\n      [`${Default.CSS_NAMESPACE}__toast--rtl`]: rtl\n    }\n  );\n  const cssClasses = isFn(className)\n    ? className({\n        rtl,\n        position,\n        type,\n        defaultClassName\n      })\n    : cx(defaultClassName, className);\n  const isProgressControlled = !!progress;\n  const maybeIcon = Icons[type as keyof typeof Icons];\n  const iconProps = { theme, type };\n  let Icon: React.ReactNode = maybeIcon && maybeIcon(iconProps);\n\n  if (icon === false) {\n    Icon = void 0;\n  } else if (isFn(icon)) {\n    Icon = icon(iconProps);\n  } else if (React.isValidElement(icon)) {\n    Icon = React.cloneElement(icon, iconProps);\n  } else if (isStr(icon)) {\n    Icon = icon;\n  } else if (isLoading) {\n    Icon = Icons.spinner();\n  }\n\n  function renderCloseButton(closeButton: any) {\n    if (!closeButton) return;\n\n    const props = { closeToast, type, theme };\n\n    if (isFn(closeButton)) return closeButton(props);\n\n    if (React.isValidElement(closeButton))\n      return React.cloneElement(closeButton, props);\n  }\n\n  return (\n    <Transition\n      isIn={isIn}\n      done={deleteToast}\n      position={position}\n      preventExitTransition={preventExitTransition}\n      nodeRef={toastRef}\n    >\n      <div\n        id={toastId as string}\n        onClick={onClick}\n        className={cssClasses}\n        {...eventHandlers}\n        style={style}\n        ref={toastRef}\n      >\n        <div\n          {...(isIn && { role: role })}\n          className={\n            isFn(bodyClassName)\n              ? bodyClassName({ type })\n              : cx(`${Default.CSS_NAMESPACE}__toast-body`, bodyClassName)\n          }\n          style={bodyStyle}\n        >\n          {Icon && (\n            <div\n              className={cx(`${Default.CSS_NAMESPACE}__toast-icon`, {\n                [`${Default.CSS_NAMESPACE}--animate-icon ${Default.CSS_NAMESPACE}__zoom-enter`]: !isLoading\n              })}\n            >\n              {Icon}\n            </div>\n          )}\n          <div>{children}</div>\n        </div>\n        {renderCloseButton(closeButton)}\n        {(autoClose || isProgressControlled) && (\n          <ProgressBar\n            {...(updateId && !isProgressControlled\n              ? { key: `pb-${updateId}` }\n              : {})}\n            rtl={rtl}\n            theme={theme}\n            delay={autoClose as number}\n            isRunning={isRunning}\n            isIn={isIn}\n            closeToast={closeToast}\n            hide={hideProgressBar}\n            type={type}\n            style={progressStyle}\n            className={progressClassName}\n            controlledProgress={isProgressControlled}\n            progress={progress}\n          />\n        )}\n      </div>\n    </Transition>\n  );\n};\n", "import { Default, cssTransition } from '../utils';\n\nconst Bounce = cssTransition({\n  enter: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__bounce-enter`,\n  exit: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__bounce-exit`,\n  appendPosition: true\n});\n\nconst Slide = cssTransition({\n  enter: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__slide-enter`,\n  exit: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__slide-exit`,\n  appendPosition: true\n});\n\nconst Zoom = cssTransition({\n  enter: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__zoom-enter`,\n  exit: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__zoom-exit`\n});\n\nconst Flip = cssTransition({\n  enter: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__flip-enter`,\n  exit: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__flip-exit`\n});\n\nexport { Bounce, Slide, Zoom, Flip };\n", "import * as React from 'react';\nimport cx from 'clsx';\n\nimport { Toast } from './Toast';\nimport { CloseButton } from './CloseButton';\nimport { Bounce } from './Transitions';\nimport { POSITION, Direction, Default, parseClassName, isFn } from '../utils';\nimport { useToastContainer } from '../hooks';\nimport { ToastContainerProps, ToastPosition } from '../types';\n\nexport const ToastContainer: React.FC<ToastContainerProps> = props => {\n  const { getToastToRender, containerRef, isToastActive } = useToastContainer(\n    props\n  );\n  const { className, style, rtl, containerId } = props;\n\n  function getClassName(position: ToastPosition) {\n    const defaultClassName = cx(\n      `${Default.CSS_NAMESPACE}__toast-container`,\n      `${Default.CSS_NAMESPACE}__toast-container--${position}`,\n      { [`${Default.CSS_NAMESPACE}__toast-container--rtl`]: rtl }\n    );\n    return isFn(className)\n      ? className({\n          position,\n          rtl,\n          defaultClassName\n        })\n      : cx(defaultClassName, parseClassName(className));\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className={Default.CSS_NAMESPACE as string}\n      id={containerId as string}\n    >\n      {getToastToRender((position, toastList) => {\n        const containerStyle: React.CSSProperties = !toastList.length\n          ? { ...style, pointerEvents: 'none' }\n          : { ...style };\n\n        return (\n          <div\n            className={getClassName(position)}\n            style={containerStyle}\n            key={`container-${position}`}\n          >\n            {toastList.map(({ content, props: toastProps }) => {\n              return (\n                <Toast\n                  {...toastProps}\n                  isIn={isToastActive(toastProps.toastId)}\n                  key={`toast-${toastProps.key}`}\n                  closeButton={\n                    toastProps.closeButton === true\n                      ? CloseButton\n                      : toastProps.closeButton\n                  }\n                >\n                  {content}\n                </Toast>\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nToastContainer.defaultProps = {\n  position: POSITION.TOP_RIGHT as ToastPosition,\n  transition: Bounce,\n  rtl: false,\n  autoClose: 5000,\n  hideProgressBar: false,\n  closeButton: CloseButton,\n  pauseOnHover: true,\n  pauseOnFocusLoss: true,\n  closeOnClick: true,\n  newestOnTop: false,\n  draggable: true,\n  draggablePercent: Default.DRAGGABLE_PERCENT as number,\n  draggableDirection: Direction.X,\n  role: 'alert',\n  theme: 'light'\n};\n", "import * as React from 'react';\nimport { render } from 'react-dom';\n\nimport { POSITION, TYPE, canUseDom, isStr, isNum, isFn } from '../utils';\nimport { eventManager, OnChangeCallback, Event } from './eventManager';\nimport {\n  ToastContent,\n  ToastOptions,\n  ToastProps,\n  Id,\n  ToastContainerProps,\n  UpdateOptions,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps,\n  TypeOptions\n} from '../types';\nimport { ContainerInstance } from '../hooks';\nimport { ToastContainer } from '../components';\n\ninterface EnqueuedToast {\n  content: ToastContent;\n  options: NotValidatedToastProps;\n}\n\nlet containers = new Map<ContainerInstance | Id, ContainerInstance>();\nlet latestInstance: ContainerInstance | Id;\nlet containerDomNode: HTMLElement;\nlet containerConfig: ToastContainerProps;\nlet queue: EnqueuedToast[] = [];\nlet lazy = false;\n\n/**\n * Get the toast by id, given it's in the DOM, otherwise returns null\n */\nfunction getToast(toastId: Id, { containerId }: ToastOptions) {\n  const container = containers.get(containerId || latestInstance);\n  if (!container) return null;\n\n  return container.getToast(toastId);\n}\n\n/**\n * Generate a random toastId\n */\nfunction generateToastId() {\n  return Math.random()\n    .toString(36)\n    .substring(2, 9);\n}\n\n/**\n * Generate a toastId or use the one provided\n */\nfunction getToastId(options?: ToastOptions) {\n  if (options && (isStr(options.toastId) || isNum(options.toastId))) {\n    return options.toastId;\n  }\n\n  return generateToastId();\n}\n\n/**\n * If the container is not mounted, the toast is enqueued and\n * the container lazy mounted\n */\nfunction dispatchToast(\n  content: ToastContent,\n  options: NotValidatedToastProps\n): Id {\n  if (containers.size > 0) {\n    eventManager.emit(Event.Show, content, options);\n  } else {\n    queue.push({ content, options });\n    if (lazy && canUseDom) {\n      lazy = false;\n      containerDomNode = document.createElement('div');\n      document.body.appendChild(containerDomNode);\n      render(<ToastContainer {...containerConfig} />, containerDomNode);\n    }\n  }\n\n  return options.toastId;\n}\n\n/**\n * Merge provided options with the defaults settings and generate the toastId\n */\nfunction mergeOptions(type: string, options?: ToastOptions) {\n  return {\n    ...options,\n    type: (options && options.type) || type,\n    toastId: getToastId(options)\n  } as NotValidatedToastProps;\n}\n\nfunction createToastByType(type: string) {\n  return (content: ToastContent, options?: ToastOptions) =>\n    dispatchToast(content, mergeOptions(type, options));\n}\n\nfunction toast(content: ToastContent, options?: ToastOptions) {\n  return dispatchToast(content, mergeOptions(TYPE.DEFAULT, options));\n}\n\ntoast.loading = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(\n    content,\n    mergeOptions(TYPE.DEFAULT, {\n      isLoading: true,\n      autoClose: false,\n      closeOnClick: false,\n      closeButton: false,\n      draggable: false,\n      ...options\n    })\n  );\n\nexport interface ToastPromiseParams {\n  pending?: string | UpdateOptions;\n  success?: string | UpdateOptions;\n  error?: string | UpdateOptions;\n}\n\nfunction handlePromise<T>(\n  promise: Promise<T> | (() => Promise<T>),\n  { pending, error, success }: ToastPromiseParams,\n  options?: ToastOptions\n) {\n  let id: Id;\n\n  if (pending) {\n    id = isStr(pending)\n      ? toast.loading(pending, options)\n      : toast.loading(pending.render, {\n          ...options,\n          ...(pending as ToastOptions)\n        });\n  }\n\n  const resetParams = {\n    isLoading: null,\n    autoClose: null,\n    closeOnClick: null,\n    closeButton: null,\n    draggable: null\n  };\n\n  const resolver = (\n    type: TypeOptions,\n    input: string | UpdateOptions | undefined,\n    result: T\n  ) => {\n    // Remove the toast if the input has not been provided. This prevents the toast from hanging\n    // in the pending state if a success/error toast has not been provided.\n    if (input == null) {\n      toast.dismiss(id);\n      return;\n    }\n\n    const baseParams = {\n      type,\n      ...resetParams,\n      ...options,\n      data: result\n    };\n    const params = isStr(input) ? { render: input } : input;\n\n    // if the id is set we know that it's an update\n    if (id) {\n      toast.update(id, {\n        ...baseParams,\n        ...params\n      });\n    } else {\n      // using toast.promise without loading\n      toast(params.render, {\n        ...baseParams,\n        ...params\n      } as ToastOptions);\n    }\n\n    return result;\n  };\n\n  const p = isFn(promise) ? promise() : promise;\n\n  //call the resolvers only when needed\n  p.then(result => resolver('success', success, result)).catch(err =>\n    resolver('error', error, err)\n  );\n\n  return p;\n}\n\ntoast.promise = handlePromise;\ntoast.success = createToastByType(TYPE.SUCCESS);\ntoast.info = createToastByType(TYPE.INFO);\ntoast.error = createToastByType(TYPE.ERROR);\ntoast.warning = createToastByType(TYPE.WARNING);\ntoast.warn = toast.warning;\ntoast.dark = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(\n    content,\n    mergeOptions(TYPE.DEFAULT, {\n      theme: 'dark',\n      ...options\n    })\n  );\n\n/**\n * Remove toast programmaticaly\n */\ntoast.dismiss = (id?: Id) => eventManager.emit(Event.Clear, id);\n\n/**\n * Clear waiting queue when limit is used\n */\ntoast.clearWaitingQueue = (params: ClearWaitingQueueParams = {}) =>\n  eventManager.emit(Event.ClearWaitingQueue, params);\n\n/**\n * return true if one container is displaying the toast\n */\ntoast.isActive = (id: Id) => {\n  let isToastActive = false;\n\n  containers.forEach(container => {\n    if (container.isToastActive && container.isToastActive(id)) {\n      isToastActive = true;\n    }\n  });\n\n  return isToastActive;\n};\n\ntoast.update = (toastId: Id, options: UpdateOptions = {}) => {\n  // if you call toast and toast.update directly nothing will be displayed\n  // this is why I defered the update\n  setTimeout(() => {\n    const toast = getToast(toastId, options as ToastOptions);\n    if (toast) {\n      const { props: oldOptions, content: oldContent } = toast;\n\n      const nextOptions = {\n        ...oldOptions,\n        ...options,\n        toastId: options.toastId || toastId,\n        updateId: generateToastId()\n      } as ToastProps & UpdateOptions;\n\n      if (nextOptions.toastId !== toastId) nextOptions.staleId = toastId;\n\n      const content = nextOptions.render || oldContent;\n      delete nextOptions.render;\n\n      dispatchToast(content, nextOptions);\n    }\n  }, 0);\n};\n\n/**\n * Used for controlled progress bar.\n */\ntoast.done = (id: Id) => {\n  toast.update(id, {\n    progress: 1\n  });\n};\n\n/**\n * Track changes. The callback get the number of toast displayed\n *\n */\ntoast.onChange = (callback: OnChangeCallback) => {\n  if (isFn(callback)) {\n    eventManager.on(Event.Change, callback);\n  }\n  return () => {\n    isFn(callback) && eventManager.off(Event.Change, callback);\n  };\n};\n\n/**\n * Configure the ToastContainer when lazy mounted\n * Prefer ToastContainer over this one\n */\ntoast.configure = (config: ToastContainerProps = {}) => {\n  lazy = true;\n  containerConfig = config;\n};\n\ntoast.POSITION = POSITION;\ntoast.TYPE = TYPE;\n\n/**\n * Wait until the ToastContainer is mounted to dispatch the toast\n * and attach isActive method\n */\neventManager\n  .on(Event.DidMount, (containerInstance: ContainerInstance) => {\n    latestInstance = containerInstance.containerId || containerInstance;\n    containers.set(latestInstance, containerInstance);\n\n    queue.forEach(item => {\n      eventManager.emit(Event.Show, item.content, item.options);\n    });\n\n    queue = [];\n  })\n  .on(Event.WillUnmount, (containerInstance: ContainerInstance) => {\n    containers.delete(containerInstance.containerId || containerInstance);\n\n    if (containers.size === 0) {\n      eventManager\n        .off(Event.Show)\n        .off(Event.Clear)\n        .off(Event.ClearWaitingQueue);\n    }\n\n    if (canUseDom && containerDomNode) {\n      document.body.removeChild(containerDomNode);\n    }\n  });\n\nexport { toast };\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA,eAAe,KAAK;AACnB,MAAI,GAAG,GAAG,MAAI;AAEd,MAAI,OAAO,QAAQ,YAAY,OAAO,QAAQ,UAAU;AACvD,WAAO;AAAA,aACG,OAAO,QAAQ,UAAU;AACnC,QAAI,MAAM,QAAQ,MAAM;AACvB,WAAK,IAAE,GAAG,IAAI,IAAI,QAAQ,KAAK;AAC9B,YAAI,IAAI,IAAI;AACX,cAAI,IAAI,MAAM,IAAI,KAAK;AACtB,mBAAQ,QAAO;AACf,mBAAO;AAAA;AAAA;AAAA;AAAA,WAIJ;AACN,WAAK,KAAK,KAAK;AACd,YAAI,IAAI,IAAI;AACX,iBAAQ,QAAO;AACf,iBAAO;AAAA;AAAA;AAAA;AAAA;AAMX,SAAO;AAAA;AAGO,0BAAY;AAC1B,MAAI,IAAE,GAAG,KAAK,GAAG,MAAI;AACrB,SAAO,IAAI,UAAU,QAAQ;AAC5B,QAAI,MAAM,UAAU,MAAM;AACzB,UAAI,IAAI,MAAM,MAAM;AACnB,eAAQ,QAAO;AACf,eAAO;AAAA;AAAA;AAAA;AAIV,SAAO;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eClCc,GAAA;AACpB,SAAO,OAAO,MAAM,YAAY,CAAC,MAAM;;gBAGlB,GAAA;AACrB,SAAO,OAAO,MAAM;;eAGA,GAAA;AACpB,SAAO,OAAO,MAAM;;cAGD,GAAA;AACnB,SAAO,OAAO,MAAM;;wBAGS,GAAA;AAC7B,SAAO,MAAM,MAAM,KAAK,KAAK,IAAI;;wBAGJ,SAAA;AAC7B,SAAO,YAAY,KAAK;;2BAIxB,gBACA,oBAAA;AAEA,SAAO,mBAAmB,SACvB,MAAM,mBAAmB,iBAAiB,IACzC,iBACA;;AAGC,IAAM,YAAY,CAAC,CACxB,QAAO,WAAW,eAClB,OAAO,YACP,OAAO,SAAS;uBAGe,SAAA;AAC/B,SACE,iCAAe,YAAY,MAAM,YAAY,KAAK,YAAY,MAAM;;AClCjE,IAAM,WAAsD;EACjE,UAAU;EACV,WAAW;EACX,YAAY;EACZ,aAAa;EACb,cAAc;EACd,eAAe;;AAGV,IAAM,OAA4C;EACvD,MAAM;EACN,SAAS;EACT,SAAS;EACT,OAAO;EACP,SAAS;;ACrBX,uBACE,MACA,MACA;MAAA,aAAA,QAAA;AAAA,eAAA;;AAEA,MAAQ,eAAwB,KAAxB,cAAc,QAAU,KAAV;AAEtB,wBAAsB,WAAA;AACpB,UAAM,YAAY;AAClB,UAAM,SAAS,eAAe;AAC9B,UAAM,aAAN,SAA0B,WAA1B;AAEA,0BAAsB,WAAA;AACpB,YAAM,SAAS;AACf,YAAM,UAAU;AAChB,YAAM,SAAS;AACf,iBAAW,MAAM;;;;ACoCvB,uBAAgB,MAAA;MACd,QAAA,KAAA,OACA,OAAA,KAAA,iCACA,gBAAA,iBAAA,wBAAA,SAAiB,QAAA,0CACjB,UAAA,WAAA,kBAAA,SAAW,OAAA,4CACX,kBAAA,mBAAA,0BAAA,SAAA,MAAA;AAEA,SAAO,yBAAA,OAAA;QACL,WAAA,MAAA,UACA,WAAA,MAAA,UACA,wBAAA,MAAA,uBACA,OAAA,MAAA,MACA,UAAA,MAAA,SACA,OAAA,MAAA;AAEA,QAAM,iBAAiB,iBAAoB,QAAN,OAAgB,WAAa;AAClE,QAAM,gBAAgB,iBAAoB,OAAN,OAAe,WAAa;AAChE,QAAM,gBAAgB;AACtB,QAAM,gBAAgB,yBAAM;AAE5B,sCAAgB,WAAA;AACd;OACC;AAEH,gCAAU,WAAA;AACR,UAAI,CAAC;AAAM,gCAAwB,aAAa;OAC/C,CAAC;AAEJ,uBAAA;AACE,UAAM,OAAO,QAAQ;AACrB,oBAAc,UAAU,KAAK;AAC7B,WAAK,aAAL,MAAsB;AACtB,WAAK,iBAAiB,gBAAgB;;AAGxC,uBAAmB,GAAnB;AACE,UAAI,EAAE,WAAW,QAAQ;AAAS;AAElC,UAAM,OAAO,QAAQ;AACrB,WAAK,cAAc,IAAI,MAAJ;AACnB,WAAK,oBAAoB,gBAAgB;AACzC,UAAI,cAAc,YAAd,GAA+C;AACjD,aAAK,YAAY,cAAc;;;AAInC,sBAAA;AACE,oBAAc,UAAd;AACA,UAAM,OAAO,QAAQ;AAErB,WAAK,aAAL,MAAsB;AACtB,WAAK,iBAAiB,gBAAgB;;AAGxC,wBAAA;AACE,UAAM,OAAO,QAAQ;AAErB,WAAK,oBAAoB,gBAAgB;AACzC,iBAAW,cAAc,MAAM,MAAM,oBAAoB;;AAG3D,WAAO,qBAAA,cAAA,qBAAA,UAAA,MAAG;;;ACtDP,IAAM,eAA6B;EACxC,MAAM,oBAAI;EACV,WAAW,oBAAI;EAEf,IAJwC,YAIrC,OAAc,UAJuB;AAKtC,SAAK,KAAK,IAAI,UAAU,KAAK,KAAK,IAAI,OAAO;AAC7C,SAAK,KAAK,IAAI,OAAQ,KAAK;AAC3B,WAAO;;EAGT,KAVwC,aAUpC,OAAO,UAV6B;AAWtC,QAAI,UAAU;AACZ,UAAM,KAAK,KAAK,KAAK,IAAI,OAAQ,OAAO,SAAA,KAAE;AAAA,eAAI,QAAO;;AACrD,WAAK,KAAK,IAAI,OAAO;AACrB,aAAO;;AAET,SAAK,KAAL,UAAiB;AACjB,WAAO;;EAGT,YApBwC,oBAoB7B,OApB6B;AAqBtC,QAAM,SAAS,KAAK,UAAU,IAAI;AAClC,QAAI,QAAQ;AACV,aAAO,QAAQ;AACf,WAAK,UAAL,UAAsB;;AAGxB,WAAO;;EAWT,MAtCwC,cAsCnC,OAtCmC;;sCAsClB,OAAA,IAAA,MAAA,OAAA,IAAA,OAAA,IAAA,IAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAAA,WAAA,OAAA,KAAA,UAAA;;AACpB,SAAK,KAAK,IAAI,UACZ,KAAK,KAAK,IAAI,OAAQ,QAAQ,SAAC,UAAD;AAC5B,UAAM,QAAmB,WAAW,WAAA;AAElC,iBAAQ,MAAR,QAAY;SACX;AAEH,YAAK,UAAU,IAAI,UAAU,MAAK,UAAU,IAAI,OAAO;AACvD,YAAK,UAAU,IAAI,OAAQ,KAAK;;;;;AC/GxC,2BAiDkC,OAAA;AAChC,MAAA,cAAwB,6BAAW,SAAA,GAAC;AAAA,WAAI,IAAI;KAAG,IAAtC,cAAT,YAAA;AACA,MAAA,YAAgC,2BAAe,KAAxC,WAAP,UAAA,IAAiB,cAAjB,UAAA;AACA,MAAM,eAAe,yBAAO;AAC5B,MAAM,gBAAgB,yBAAO,oBAAI,OAAkB;AACnD,MAAM,gBAAgB,wBAAC,IAAD;AAAA,WAAY,SAAS,QAAQ,QAAQ;;AAC3D,MAAM,WAAW,yBAA0B;IACzC,UAAU;IACV,gBAAgB;IAChB,OAAO;IACP,OAAO;IACP;IACA,aAAa;IACb;IACA,UAAU,mBAAA,IAAE;AAAA,aAAI,cAAc,IAAI;;KACjC;AAEH,8BAAU,WAAA;AACR,aAAS,cAAc,MAAM;AAC7B,iBACG,WADH,GAEG,GAFH,GAEkB,YACf,GAHH,GAGmB,SAAA,SAAO;AAAA,aAAI,aAAa,WAAW,YAAY;OAC/D,GAJH,GAI+B,mBAC5B,KALH,GAKwB;AAExB,WAAO,WAAA;AAAA,aAAM,aAAa,KAAb,GAAqC;;KACjD;AAEH,8BAAU,WAAA;AACR,aAAS,gBAAgB;AACzB,aAAS,iBAAiB,SAAS;AACnC,iBAAa,KAAb,GAAgC,SAAS,QAAQ,MAAM;KACtD,CAAC;AAEJ,8BAAU,WAAA;AACR,aAAS,QAAQ;;AAGnB,6BAAA,MAAA;QAA6B,cAAA,KAAA;AAC3B,QAAQ,QAAU,SAAS,MAAnB;AACR,QAAI,SAAU,EAAC,eAAe,SAAS,gBAAgB,cAAc;AACnE,eAAS,SAAS,SAAS,MAAM;AACjC,eAAS,QAAQ;;;AAIrB,uBAAqB,SAArB;AACE,gBAAY,SAAA,OAAK;AAAA,aACf,eAAe,WAAW,MAAM,OAAO,SAAA,IAAE;AAAA,eAAI,OAAO;WAAW;;;AAInE,0BAAA;AACE,QAAA,wBAII,SAAS,MAAM,SAHjB,eADF,sBACE,cACA,aAFF,sBAEE,YACA,UAHF,sBAGE;AAEF,gBAAY,cAAc,YAAY;;AAQxC,sBAAoB,SAApB;AACE,WACE,CAAC,aAAa,WACb,SAAS,MAAM,wBACd,QAAQ,gBAAgB,SAAS,MAAM,eACxC,cAAc,IAAI,QAAQ,YAAY,QAAQ,YAAY;;AAK/D,sBACE,SADF,OAAA;QAEI,QAAA,MAAA,OAAO,UAAA,MAAA,SAAY,UAAA,8BAAA,OAAA;AAErB,QAAI,CAAC,cAAc,YAAY,WAAW;AAAU;AAEpD,QAAQ,UAA4B,QAA5B,SAAS,WAAmB,QAAnB,UAAU,OAAS,QAAT;AAC3B,QAAQ,SAAU,SAAV;AACR,QAAM,aAAa,uBAAA;AAAA,aAAM,YAAY;;AACrC,QAAM,gBAAgB,YAAY;AAElC,QAAI;AAAe,eAAS;AAE5B,QAAM,aAAyB;MAC7B;MACA;MACA,WAAW,QAAQ;MACnB,OAAO,QAAQ,SAAS,OAAM;MAC9B,MAAM,QAAQ,QAAQ,OAAO,QAAQ,OAAO,OAAM;MAClD,MAAM;MACN,KAAK,QAAQ,OAAO,SAAS;MAC7B,MAAM,QAAQ;MACd;MACA,aAAa,QAAQ;MACrB,KAAK,OAAM;MACX,UAAU,QAAQ,YAAa,OAAM;MACrC,YAAY,QAAQ,cAAe,OAAM;MACzC,WAAW,eAAe,QAAQ,aAAa,OAAM;MACrD,eAAe,eACb,QAAQ,iBAAiB,OAAM;MAEjC,OAAO,QAAQ,SAAS,OAAM;MAC9B,WAAW,QAAQ,aAAa,OAAM;MACtC,SAAS,QAAQ,WAAW,OAAM;MAClC,cAAc,OAAO,QAAQ,gBACzB,QAAQ,eACR,OAAM;MACV,kBAAkB,OAAO,QAAQ,oBAC7B,QAAQ,mBACR,OAAM;MACV,WAAW,OAAO,QAAQ,aACtB,QAAQ,YACR,OAAM;MACV,kBACE,QAAQ,oBAAqB,OAAM;MACrC,oBACE,QAAQ,sBAAsB,OAAM;MACtC,cAAc,OAAO,QAAQ,gBACzB,QAAQ,eACR,OAAM;MACV,mBAAmB,eACjB,QAAQ,qBAAqB,OAAM;MAErC,eAAe,QAAQ,iBAAiB,OAAM;MAC9C,WAAW,QAAQ,YACf,QACA,kBAAkB,QAAQ,WAAW,OAAM;MAC/C,iBAAiB,OAAO,QAAQ,mBAC5B,QAAQ,kBACR,OAAM;MACV,UAAU,QAAQ;MAClB,MAAM,QAAQ,QAAQ,OAAM;MAC5B,aAjD6B,uBAAA;AAkD3B,sBAAa,UAAQ;AACrB,YAAM,WAAW,SAAS,MAAM;AAChC,iBAAS,QAAQ,eAAe,WAC5B,SAAS,QAAQ,IACjB,SAAS,QAAQ,SAAS;AAE9B,YAAI,SAAS,QAAQ;AAAG,mBAAS,QAAQ;AAEzC,YAAI,WAAW,GAAG;AAChB,cAAM,WAAW,eAAe,WAAW,IAAI,SAAS,MAAM;AAE9D,cAAI,aAAa,KAAK,aAAa,GAAG;AACpC,qBAAS;AACT;iBACK;AACL,gBAAM,YAAY,WAAW,WAAW,WAAW;AACnD,qBAAS,iBAAiB;AAE1B,qBAAS,IAAI,GAAG,IAAI,WAAW,KAA/B;AAAoC;;;eAEjC;AACL;;;;AAKN,QAAI,KAAK,QAAQ;AAAS,iBAAW,SAAS,QAAQ;AACtD,QAAI,KAAK,QAAQ;AAAU,iBAAW,UAAU,QAAQ;AAExD,eAAW,cAAc,OAAM;AAE/B,QAAI,QAAQ,gBAAgB,SAAS,cAAc,QAAQ,cAAc;AACvE,iBAAW,cAAc,QAAQ;eACxB,QAAQ,gBAAgB,MAAM;AACvC,iBAAW,cAAc,cAAc,OAAM,eACzC,OAAM,cACN;;AAGN,QAAI,eAAe;AAEnB,QAAI,iCAAe,YAAY,CAAC,MAAM,QAAQ,OAAO;AACnD,qBAAe,+BAAa,SAAS;QACnC;QACA;QACA;;eAEO,KAAK,UAAU;AACxB,qBAAe,QAAQ;QAAE;QAAY;QAAY;;;AAInD,QACE,OAAM,SACN,OAAM,QAAQ,KACd,SAAS,QAAQ,OAAM,SACvB,eACA;AACA,eAAS,MAAM,KAAK;QAAE;QAAc;QAAY;;eACvC,MAAM,UAAW,QAAmB,GAAG;AAChD,iBAAW,WAAA;AACT,oBAAY,cAAc,YAAY;SACrC;WACE;AACL,kBAAY,cAAc,YAAY;;;AAI1C,uBACE,SACA,YACA,SAHF;AAKE,QAAQ,UAAY,WAAZ;AAER,QAAI;AAAS,oBAAa,UAAQ;AAElC,kBAAc,IAAI,SAAS;MACzB;MACA,OAAO;;AAET,gBAAY,SAAA,OAAK;AAAA,aAAI,GAAA,OAAI,OAAJ,CAAW,UAAS,OAAO,SAAA,IAAE;AAAA,eAAI,OAAO;;;;AAG/D,4BACE,IADF;AAGE,QAAM,WAAW,oBAAI;AACrB,QAAM,aAAa,MAAM,KAAK,cAAc;AAE5C,QAAI,MAAM;AAAa,iBAAW;AAElC,eAAW,QAAQ,SAAA,QAAK;AACtB,UAAQ,WAAa,OAAM,MAAnB;AACR,eAAS,IAAI,aAAa,SAAS,IAAI,UAAU;AACjD,eAAS,IAAI,UAAW,KAAK;;AAG/B,WAAO,MAAM,KAAK,UAAU,SAAA,GAAC;AAAA,aAAI,GAAG,EAAE,IAAI,EAAE;;;AAG9C,SAAO;IACL;IACA;IACA;;;AC5QJ,cAAc,GAAd;AACE,SAAO,EAAE,iBAAiB,EAAE,cAAc,UAAU,IAChD,EAAE,cAAc,GAAG,UACnB,EAAE;;AAGR,cAAc,GAAd;AACE,SAAO,EAAE,iBAAiB,EAAE,cAAc,UAAU,IAChD,EAAE,cAAc,GAAG,UACnB,EAAE;;AAGR,kBAAyB,OAAA;AACvB,MAAA,YAAkC,2BAAS,QAApC,YAAP,UAAA,IAAkB,eAAlB,UAAA;AACA,MAAA,aAA0D,2BAAS,QAA5D,wBAAP,WAAA,IAA8B,2BAA9B,WAAA;AACA,MAAM,WAAW,yBAAuB;AACxC,MAAM,OAAO,yBAAkB;IAC7B,OAAO;IACP,GAAG;IACH,GAAG;IACH,OAAO;IACP,iBAAiB;IACjB,iBAAiB;IACjB,SAAS;IACT,cAAc;IACd,SAAS;KACR;AACH,MAAM,YAAY,yBAAO;AACzB,MAAQ,YAA+D,MAA/D,WAAW,eAAoD,MAApD,cAAc,aAAsC,MAAtC,YAAY,UAA0B,MAA1B,SAAS,eAAiB,MAAjB;AAEtD,8BAAU,WAAA;AACR,cAAU,UAAU;;AAGtB,8BAAU,WAAA;AACR,QAAI,SAAS;AACX,eAAS,QAAQ,iBAAjB,KAEE,WACA;QAAE,MAAM;;AAGZ,QAAI,KAAK,MAAM;AACb,YAAM,OAAO,iCAAe,MAAM,aAAa,MAAM,SAAS;AAEhE,WAAO,WAAA;AACL,UAAM,SAAQ,UAAU;AACxB,UAAI,KAAK,OAAM;AACb,eAAM,QAAQ,iCAAe,OAAM,aAAa,OAAM,SAAS;;KAElE;AAEH,8BAAU,WAAA;AACR,UAAM,oBAAoB;AAC1B,WAAO,WAAA;AACL,YAAM,oBAAoB;;KAE3B,CAAC,MAAM;AAEV,uBACE,GADF;AAGE,QAAI,MAAM,WAAW;AACnB;AACA,UAAM,SAAQ,SAAS;AACvB,WAAK,kBAAkB;AACvB,WAAK,UAAU;AACf,WAAK,eAAe,OAAM;AAC1B,aAAM,MAAM,aAAa;AACzB,WAAK,IAAI,KAAK,EAAE;AAChB,WAAK,IAAI,KAAK,EAAE;AAEhB,UAAI,MAAM,uBAAN,KAA0C;AAC5C,aAAK,QAAQ,KAAK;AAClB,aAAK,kBACH,OAAM,cAAe,OAAM,mBAAmB;aAC3C;AACL,aAAK,QAAQ,KAAK;AAClB,aAAK,kBACH,OAAM,eACL,OAAM,qBAAN,KACG,MAAM,mBAAmB,MACzB,MAAM,mBAAmB;;;;AAKrC,iCAAA;AACE,QAAI,KAAK,cAAc;AACrB,UAAA,qBAAqC,KAAK,cAAlC,MAAR,mBAAQ,KAAK,SAAb,mBAAa,QAAQ,OAArB,mBAAqB,MAAM,QAA3B,mBAA2B;AAE3B,UACE,MAAM,gBACN,KAAK,KAAK,QACV,KAAK,KAAK,SACV,KAAK,KAAK,OACV,KAAK,KAAK,QACV;AACA;aACK;AACL;;;;AAKN,uBAAA;AACE,iBAAa;;AAGf,wBAAA;AACE,iBAAa;;AAGf,6BAAA;AACE,QAAI,CAAC,SAAS;AAAY;AAE1B,WAAO,iBAAiB,SAAS;AACjC,WAAO,iBAAiB,QAAQ;;AAGlC,+BAAA;AACE,WAAO,oBAAoB,SAAS;AACpC,WAAO,oBAAoB,QAAQ;;AAGrC,4BAAA;AACE,SAAK,UAAU;AACf,aAAS,iBAAiB,aAAa;AACvC,aAAS,iBAAiB,WAAW;AAErC,aAAS,iBAAiB,aAAa;AACvC,aAAS,iBAAiB,YAAY;;AAGxC,8BAAA;AACE,aAAS,oBAAoB,aAAa;AAC1C,aAAS,oBAAoB,WAAW;AAExC,aAAS,oBAAoB,aAAa;AAC1C,aAAS,oBAAoB,YAAY;;AAG3C,sBAAoB,GAApB;AACE,QAAM,SAAQ,SAAS;AACvB,QAAI,KAAK,WAAW,QAAO;AACzB,WAAK,UAAU;AACf,UAAI;AAAW;AACf,WAAK,IAAI,KAAK;AACd,WAAK,IAAI,KAAK;AACd,UAAI,MAAM,uBAAN,KAA0C;AAC5C,aAAK,QAAQ,KAAK,IAAI,KAAK;aACtB;AACL,aAAK,QAAQ,KAAK,IAAI,KAAK;;AAI7B,UAAI,KAAK,UAAU,KAAK;AAAG,aAAK,kBAAkB;AAClD,aAAM,MAAM,YAAZ,cAAoC,MAAM,qBAA1C,MAAgE,KAAK,QAArE;AACA,aAAM,MAAM,UAAZ,KAAyB,KACvB,KAAK,IAAI,KAAK,QAAQ,KAAK;;;AAIjC,uBAAA;AACE;AACA,QAAM,SAAQ,SAAS;AACvB,QAAI,KAAK,WAAW,KAAK,WAAW,QAAO;AACzC,WAAK,UAAU;AACf,UAAI,KAAK,IAAI,KAAK,SAAS,KAAK,iBAAiB;AAC/C,iCAAyB;AACzB,cAAM;AACN;;AAEF,aAAM,MAAM,aAAa;AACzB,aAAM,MAAM,YAAZ,cAAoC,MAAM,qBAA1C;AACA,aAAM,MAAM,UAAU;;;AAI1B,MAAM,gBAA4C;IAChD,aAAa;IACb,cAAc;IACd,WAAW;IACX,YAAY;;AAGd,MAAI,aAAa,cAAc;AAC7B,kBAAc,eAAe;AAC7B,kBAAc,eAAe;;AAI/B,MAAI,cAAc;AAChB,kBAAc,UAAU,SAAC,GAAD;AACtB,iBAAW,QAAQ;AACnB,WAAK,mBAAmB;;;AAI5B,SAAO;IACL;IACA;IACA;IACA;IACA;IACA;;;qBC3NY,MAAA;MACd,aAAA,KAAA,YACA,QAAA,KAAA,6BACA,WAAA,YAAA,mBAAA,SAAY,UAAA;AAEZ,SACE,gCAAA,UAAA;IACE,WAAc,oDAA+E;IAC7F,MAAK;IACL,SAAS,iBAAA,GAAC;AACR,QAAE;AACF,iBAAW;;kBAED;KAEZ,gCAAA,OAAA;mBAAiB;IAAO,SAAQ;KAC9B,gCAAA,QAAA;IACE,UAAS;IACT,GAAE;;;qBCuCI,MAAA;;MACd,QAAA,KAAA,OACA,YAAA,KAAA,WACA,aAAA,KAAA,YACA,OAAA,KAAA,MACA,OAAA,KAAA,MACA,YAAA,KAAA,WACO,YAAA,KAAP,OACA,qBAAA,KAAA,oBACA,WAAA,KAAA,UACA,MAAA,KAAA,KACA,OAAA,KAAA,MACA,QAAA,KAAA;AAEA,MAAM,QAAK,SAAA,IACN,WADM;IAET,mBAAsB,QAAL;IACjB,oBAAoB,YAAY,YAAY;IAC5C,SAAS,OAAO,IAAI;;AAGtB,MAAI;AAAoB,UAAM,YAAN,YAA4B,WAA5B;AACxB,MAAM,mBAAmB,eACpB,0BACH,qBACO,uCACA,oCACJ,mCAA8C,OAC9C,6BAAwC,MANlB,OAAA,IAAA,IAQnB,iCAA6C,KAR1B;AAW3B,MAAM,aAAa,KAAK,aACpB,UAAU;IACR;IACA;IACA;OAEF,eAAG,kBAAkB;AAKzB,MAAM,iBAAc,mBAAA,IAAA,gBACjB,sBAAsB,YAAa,IAChC,oBACA,oBACF,sBAAsB,WAAY,IAC9B,OACA,WAAA;AACE,YAAQ;KAPE;AAapB,SACE,gCAAA,OAAA,OAAA,OAAA;IACE,MAAK;mBACQ,OAAO,SAAS;kBAClB;IACX,WAAW;IACX;KACI;;AAKV,YAAY,eAAe;EACzB,MAAM,KAAK;EACX,MAAM;;;AC5HR,IAAM,MAAkC,cAAA,MAAA;AAAA,MAAG,QAAH,KAAG,OAAO,OAAV,KAAU,MAAS,OAAnB,8BAAA,MAAA;AAAA,SACtC,gCAAA,OAAA,OAAA,OAAA;IACE,SAAQ;IACR,OAAM;IACN,QAAO;IACP,MACE,UAAU,YACN,iBADJ,+BAEiC,OAFjC;KAIE;;AAIR,iBAAiB,OAAjB;AACE,SACE,gCAAC,KAAD,OAAA,OAAA,IAAS,QACP,gCAAA,QAAA;IAAM,GAAE;;;AAKd,cAAc,OAAd;AACE,SACE,gCAAC,KAAD,OAAA,OAAA,IAAS,QACP,gCAAA,QAAA;IAAM,GAAE;;;AAKd,iBAAiB,OAAjB;AACE,SACE,gCAAC,KAAD,OAAA,OAAA,IAAS,QACP,gCAAA,QAAA;IAAM,GAAE;;;AAKd,eAAe,OAAf;AACE,SACE,gCAAC,KAAD,OAAA,OAAA,IAAS,QACP,gCAAA,QAAA;IAAM,GAAE;;;AAKd,mBAAA;AACE,SAAO,gCAAA,OAAA;IAAK,WAAc;;;AAG5B,IAAa,QAAQ;EACnB,MAAM;EACN,SAAS;EACT,SAAS;EACT,OAAO;EACP,SAAS;;AC7DJ,IAAM,QAA8B,gBAAA,OAAK;;AAC9C,MAAA,YAKI,SAAS,QAJX,YADF,UACE,WACA,wBAFF,UAEE,uBACA,WAHF,UAGE,UACA,gBAJF,UAIE;AAEF,MACE,cAyBE,MAzBF,aACA,WAwBE,MAxBF,UACA,YAuBE,MAvBF,WACA,UAsBE,MAtBF,SACA,OAqBE,MArBF,MACA,kBAoBE,MApBF,iBACA,aAmBE,MAnBF,YACY,aAkBV,MAlBF,YACA,WAiBE,MAjBF,UACA,YAgBE,MAhBF,WACA,QAeE,MAfF,OACA,gBAcE,MAdF,eACA,YAaE,MAbF,WACA,oBAYE,MAZF,mBACA,gBAWE,MAXF,eACA,WAUE,MAVF,UACA,OASE,MATF,MACA,WAQE,MARF,UACA,MAOE,MAPF,KACA,UAME,MANF,SACA,cAKE,MALF,aACA,OAIE,MAJF,MACA,YAGE,MAHF,WACA,OAEE,MAFF,MACA,QACE,MADF;AAEF,MAAM,mBAAmB,eACpB,mBACA,4BAAuC,OACvC,sBAAiC,MAHX,OAAA,IAAA,IAKnB,0BAAsC,KALnB;AAQ3B,MAAM,aAAa,KAAK,aACpB,UAAU;IACR;IACA;IACA;IACA;OAEF,eAAG,kBAAkB;AACzB,MAAM,uBAAuB,CAAC,CAAC;AAC/B,MAAM,YAAY,MAAM;AACxB,MAAM,YAAY;IAAE;IAAO;;AAC3B,MAAI,OAAwB,aAAa,UAAU;AAEnD,MAAI,SAAS,OAAO;AAClB,WAAO;aACE,KAAK,OAAO;AACrB,WAAO,KAAK;aACH,iCAAqB,OAAO;AACrC,WAAO,+BAAmB,MAAM;aACvB,MAAM,OAAO;AACtB,WAAO;aACE,WAAW;AACpB,WAAO,MAAM;;AAGf,6BAA2B,cAA3B;AACE,QAAI,CAAC;AAAa;AAElB,QAAM,SAAQ;MAAE;MAAY;MAAM;;AAElC,QAAI,KAAK;AAAc,aAAO,aAAY;AAE1C,QAAI,iCAAqB;AACvB,aAAO,+BAAmB,cAAa;;AAG3C,SACE,gCAAC,YAAD;IACE;IACA,MAAM;IACN;IACA;IACA,SAAS;KAET,gCAAA,OAAA,OAAA,OAAA;IACE,IAAI;IACJ;IACA,WAAW;KACP,eAAA;IACJ;IACA,KAAK;MAEL,gCAAA,OAAA,OAAA,OAAA,IACO,QAAQ;IAAE;KAAF;IACb,WACE,KAAK,iBACD,cAAc;MAAE;SAChB,eAAM,wBAAqC;IAEjD,OAAO;MAEN,QACC,gCAAA,OAAA;IACE,WAAW,eAAM,wBAAJ,QAAA,IAAA,KACP,iDAA6E,CAAC,WADvE;KAIZ,OAGL,gCAAA,OAAA,MAAM,YAEP,kBAAkB,cACjB,cAAa,yBACb,gCAAC,aAAD,OAAA,OAAA,IACO,YAAY,CAAC,uBACd;IAAE,KAAG,QAAQ;MACb,IAAA;IACJ;IACA;IACA,OAAO;IACP;IACA;IACA;IACA,MAAM;IACN;IACA,OAAO;IACP,WAAW;IACX,oBAAoB;IACpB;;;IC1IN,SAAS,cAAc;EAC3B,OAAU;EACV,MAAS;EACT,gBAAgB;;AAGlB,IAAM,QAAQ,cAAc;EAC1B,OAAU;EACV,MAAS;EACT,gBAAgB;;AAGlB,IAAM,OAAO,cAAc;EACzB,OAAU;EACV,MAAS;;AAGX,IAAM,OAAO,cAAc;EACzB,OAAU;EACV,MAAS;;ICXE,iBAAgD,yBAAA,OAAK;AAChE,MAAA,qBAA0D,kBACxD,QADM,mBAAR,mBAAQ,kBAAkB,eAA1B,mBAA0B,cAAc,gBAAxC,mBAAwC;AAGxC,MAAQ,YAAuC,MAAvC,WAAW,QAA4B,MAA5B,OAAO,MAAqB,MAArB,KAAK,cAAgB,MAAhB;AAE/B,wBAAsB,UAAtB;;AACE,QAAM,mBAAmB,eACpB,6BACA,gCAA2C,UAFrB,OAAA,IAAA,IAGnB,oCAAgD,KAH7B;AAK3B,WAAO,KAAK,aACR,UAAU;MACR;MACA;MACA;SAEF,eAAG,kBAAkB,eAAe;;AAG1C,SACE,gCAAA,OAAA;IACE,KAAK;IACL,WAAW;IACX,IAAI;KAEH,iBAAiB,SAAC,UAAU,WAAX;AAChB,QAAM,iBAAsC,CAAC,UAAU,SAAX,SAAA,IACnC,OADmC;MAC5B,eAAe;SADa,SAAA,IAEnC;AAET,WACE,gCAAA,OAAA;MACE,WAAW,aAAa;MACxB,OAAO;MACP,KAAG,eAAe;OAEjB,UAAU,IAAI,SAAA,MAAA;UAAG,UAAA,KAAA,SAAgB,aAAA,KAAP;AACzB,aACE,gCAAC,OAAD,OAAA,OAAA,IACM,YAAA;QACJ,MAAM,cAAc,WAAW;QAC/B,KAAG,WAAW,WAAW;QACzB,aACE,WAAW,gBAAgB,OACvB,cACA,WAAW;UAGhB;;;;AAWnB,eAAe,eAAe;EAC5B,UAAU,SAAS;EACnB,YAAY;EACZ,KAAK;EACL,WAAW;EACX,iBAAiB;EACjB,aAAa;EACb,cAAc;EACd,kBAAkB;EAClB,cAAc;EACd,aAAa;EACb,WAAW;EACX,kBAAkB;EAClB,oBAAkB;EAClB,MAAM;EACN,OAAO;;AC9DT,IAAI,aAAa,oBAAI;AACrB,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI,QAAyB;AAC7B,IAAI,OAAO;AAKX,kBAAkB,SAAlB,MAAA;MAAiC,cAAA,KAAA;AAC/B,MAAM,YAAY,WAAW,IAAI,eAAe;AAChD,MAAI,CAAC;AAAW,WAAO;AAEvB,SAAO,UAAU,SAAS;;AAM5B,2BAAA;AACE,SAAO,KAAK,SACT,SAAS,IACT,UAAU,GAAG;;AAMlB,oBAAoB,SAApB;AACE,MAAI,WAAY,OAAM,QAAQ,YAAY,MAAM,QAAQ,WAAW;AACjE,WAAO,QAAQ;;AAGjB,SAAO;;AAOT,uBACE,SACA,SAFF;AAIE,MAAI,WAAW,OAAO,GAAG;AACvB,iBAAa,KAAb,GAA8B,SAAS;SAClC;AACL,UAAM,KAAK;MAAE;MAAS;;AACtB,QAAI,QAAQ,WAAW;AACrB,aAAO;AACP,yBAAmB,SAAS,cAAc;AAC1C,eAAS,KAAK,YAAY;AAC1B,mCAAO,gCAAC,gBAAD,OAAA,OAAA,IAAoB,mBAAqB;;;AAIpD,SAAO,QAAQ;;AAMjB,sBAAsB,MAAc,SAApC;AACE,SAAA,SAAA,IACK,SADL;IAEE,MAAO,WAAW,QAAQ,QAAS;IACnC,SAAS,WAAW;;;AAIxB,2BAA2B,MAA3B;AACE,SAAO,SAAC,SAAuB,SAAxB;AAAA,WACL,cAAc,SAAS,aAAa,MAAM;;;AAG9C,eAAe,SAAuB,SAAtC;AACE,SAAO,cAAc,SAAS,aAAa,KAAK,SAAS;;AAG3D,MAAM,UAAU,SAAC,SAAuB,SAAxB;AAAA,SACd,cACE,SACA,aAAa,KAAK,SAAN,SAAA;IACV,WAAW;IACX,WAAW;IACX,cAAc;IACd,aAAa;IACb,WAAW;KACR;;AAUT,uBACE,SADF,OAGE,SAHF;MAEI,UAAA,MAAA,SAAS,QAAA,MAAA,OAAO,UAAA,MAAA;AAGlB,MAAI;AAEJ,MAAI,SAAS;AACX,SAAK,MAAM,WACP,MAAM,QAAQ,SAAS,WACvB,MAAM,QAAQ,QAAQ,QAAtB,SAAA,IACK,SACC;;AAIZ,MAAM,cAAc;IAClB,WAAW;IACX,WAAW;IACX,cAAc;IACd,aAAa;IACb,WAAW;;AAGb,MAAM,WAAW,mBACf,MACA,OACA,QAHe;AAOf,QAAI,SAAS,MAAM;AACjB,YAAM,QAAQ;AACd;;AAGF,QAAM,aAAU,SAAA;MACd;OACG,aACA,SAHW;MAId,MAAM;;AAER,QAAM,SAAS,MAAM,SAAS;MAAE,QAAQ;QAAU;AAGlD,QAAI,IAAI;AACN,YAAM,OAAO,IAAb,SAAA,IACK,YACA;WAEA;AAEL,YAAM,OAAO,QAAR,SAAA,IACA,YACA;;AAIP,WAAO;;AAGT,MAAM,IAAI,KAAK,WAAW,YAAY;AAGtC,IAAE,KAAK,SAAA,QAAM;AAAA,WAAI,SAAS,WAAW,SAAS;KAA9C,SAA6D,SAAA,KAAG;AAAA,WAC9D,SAAS,SAAS,OAAO;;AAG3B,SAAO;;AAGT,MAAM,UAAU;AAChB,MAAM,UAAU,kBAAkB,KAAK;AACvC,MAAM,OAAO,kBAAkB,KAAK;AACpC,MAAM,QAAQ,kBAAkB,KAAK;AACrC,MAAM,UAAU,kBAAkB,KAAK;AACvC,MAAM,OAAO,MAAM;AACnB,MAAM,OAAO,SAAC,SAAuB,SAAxB;AAAA,SACX,cACE,SACA,aAAa,KAAK,SAAN,SAAA;IACV,OAAO;KACJ;;AAOT,MAAM,UAAU,SAAC,IAAD;AAAA,SAAa,aAAa,KAAb,GAA+B;;AAK5D,MAAM,oBAAoB,SAAC,QAAD;AAAA,MAAC,WAAD,QAAA;AAAC,aAAkC;;AAAnC,SACxB,aAAa,KAAb,GAA2C;;AAK7C,MAAM,WAAW,SAAC,IAAD;AACf,MAAI,gBAAgB;AAEpB,aAAW,QAAQ,SAAA,WAAS;AAC1B,QAAI,UAAU,iBAAiB,UAAU,cAAc,KAAK;AAC1D,sBAAgB;;;AAIpB,SAAO;;AAGT,MAAM,SAAS,SAAC,SAAa,SAAd;MAAc,YAAA,QAAA;AAAA,cAAyB;;AAGpD,aAAW,WAAA;AACT,QAAM,SAAQ,SAAS,SAAS;AAChC,QAAI,QAAO;AACT,UAAe,aAAoC,OAA3C,OAA4B,aAAe,OAAxB;AAE3B,UAAM,cAAW,SAAA,IACZ,YACA,SAFY;QAGf,SAAS,QAAQ,WAAW;QAC5B,UAAU;;AAGZ,UAAI,YAAY,YAAY;AAAS,oBAAY,UAAU;AAE3D,UAAM,UAAU,YAAY,UAAU;AACtC,aAAO,YAAY;AAEnB,oBAAc,SAAS;;KAExB;;AAML,MAAM,OAAO,SAAC,IAAD;AACX,QAAM,OAAO,IAAI;IACf,UAAU;;;AAQd,MAAM,WAAW,SAAC,UAAD;AACf,MAAI,KAAK,WAAW;AAClB,iBAAa,GAAb,GAA8B;;AAEhC,SAAO,WAAA;AACL,SAAK,aAAa,aAAa,IAAb,GAA+B;;;AAQrD,MAAM,YAAY,SAAC,QAAD;MAAC,WAAA,QAAA;AAAA,aAA8B;;AAC/C,SAAO;AACP,oBAAkB;;AAGpB,MAAM,WAAW;AACjB,MAAM,OAAO;AAMb,aACG,GADH,GACsB,SAAC,mBAAD;AAClB,mBAAiB,kBAAkB,eAAe;AAClD,aAAW,IAAI,gBAAgB;AAE/B,QAAM,QAAQ,SAAA,MAAI;AAChB,iBAAa,KAAb,GAA8B,KAAK,SAAS,KAAK;;AAGnD,UAAQ;GAET,GAXH,GAWyB,SAAC,mBAAD;AACrB,aAAU,UAAQ,kBAAkB,eAAe;AAEnD,MAAI,WAAW,SAAS,GAAG;AACzB,iBACG,IADH,GAEG,IAFH,GAGG,IAHH;;AAMF,MAAI,aAAa,kBAAkB;AACjC,aAAS,KAAK,YAAY;;;",
  "names": []
}
